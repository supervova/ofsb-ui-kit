// -----------------------------------------------------------------------------
// COLOR FUNCTIONS
// -----------------------------------------------------------------------------

/// COLORS FROM THE MAPS

/// Get color from color roles Sass map
/// @param {String} $key ['primary'] - Key for color map.
/// @output {Color}
@function color($key: 'primary') {
  @return map-get($colors, $key);
}

/// Get color from foreground colors Sass map
/// @param {String} $theme ['light'] - Dark or light themes array.
/// @param {String} $key ['text-primary'] - Key for color map.
/// @output {Color}
@function color-foreground($theme: 'light', $key: 'text-primary') {
  @return map-get(map-get($colors-foreground, $theme), $key);
}


/// CONTRASTING FOREGROUND COLOR

/// The following  Bootstrap function calculates if text needs to be light
/// or dark depending on the background color passed. Color brightness
/// is determined by the formula for converting RGB values to YIQ values.

/// @param {Color} $color - Background color of component.
/// @param {String} $opacity ['text-primary'] - Key for foreground colors map.
/// @output {Color} - Sufficiently contrasting foreground the color of a certain
///   level of the visual hierarchy.
/// @example
///   color: color-fg(color('background'), 'muted');
@function color-fg($color, $opacity: 'normal') {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= 150) {
    // Dark on light
    @return color-foreground('light', $opacity);
  } @else {
    // Light on dark
    @return color-foreground('dark', $opacity);
  }
}


/// TONAL PALETTE

/// Create tints and shadows using darken() and lighten() methods
/// @param {String | Color} $color - Key for color roles map or color value.
/// @param {Number} $level [0] - Degree of lightening or darkening of given
///   color, a multiple of $color-interval.
/// @output {Color} â€” Shade or tint of given color
@function color-tone($color, $level: 0) {
  $color: color($color) or $color;

  @if ($level > 0) {
    @return lighten($color, $level * $color-interval);
  } @else {
    $level: abs($level);
    @return darken($color, $level * $color-interval);
  }
}
