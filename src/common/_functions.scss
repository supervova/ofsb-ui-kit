// -----------------------------------------------------------------------------
// COLOR FUNCTIONS
// -----------------------------------------------------------------------------

// COLORS FROM THE MAPS

// Get color from color roles Sass map
// @param {String} $key ['primary'] - Key for color map.
// @output {Color}

@function color($key: 'primary') {
  @return map-get($colors, $key);
}

// Get color from foreground colors Sass map
// @param {String} $theme ['light'] - Dark or light themes array.
// @param {String} $key ['text-primary'] - Key for color map.
// @output {Color}

@function color-ink-option($theme: 'light', $key: 'normal') {
  @return map-get(map-get($ink-colors, $theme), $key);
}


// CONTRASTING FOREGROUND COLOR

// The following  Bootstrap function calculates if text needs to be light
// or dark depending on the background color passed. Color brightness
// is determined by the formula for converting RGB values to YIQ values.

// @param {Color} $color - Background color of component.
// @param {String} $opacity ['text-primary'] - Key for foreground colors map.
// @output {Color} - Sufficiently contrasting foreground the color of a certain
//   level of the visual hierarchy.
// @example
//   color: color-ink(color('background-main'), 'muted');

@function color-ink($color, $opacity: 'normal') {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  // TODO. Fix check for white color.
  @if ($color == #fff or $color == rgb(255, 255, 255) or $color == white or $yiq == 255) {
    // Greys on white
    @return color-ink-option('light-greys', $opacity);
  } @else {
    @if ($yiq >= 150) {
      // Dark on light
      @return color-ink-option('light', $opacity);
    } @else {
      // Light on dark
      @return color-ink-option('dark', $opacity);
    }
  }
}


// -----------------------------------------------------------------------------
// LAYOUT FUNCTIONS
// -----------------------------------------------------------------------------

// Replace map-get($grid-breakpoints, ...) w/ simple function call
// @example
//     @media (min-width: #{breakpoints('lg')}) {â€¦}
@function breakpoints($key) {
  @if map-has-key($grid-breakpoints, $key) {
    @return map-get($grid-breakpoints, $key);
  }

  @warn 'Unknown `#{$key}` in $grid-breakpoints.';
  @return null;
}

// Replace map-get() for container max-width map
// @example
//     max-width: max-width('lg');
@function container-max-width($key) {
  @if map-has-key($container-max-widths, $key) {
    @return map-get($container-max-widths, $key);
  }

  @warn 'Unknown `#{$key}` in $container-max-widths.';
  @return null;
}


// -----------------------------------------------------------------------------
// MATH FUNCTIONS
// -----------------------------------------------------------------------------

// ROUND A DECIMAL TO SPECIFIED DIGITS

// @param  {Number} $number A number to round
// @param  {Number} [0] Digits to output
// @param  {String} [round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67

@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

