// Common tools and settings
@import '../../common/variables';
@import '../../common/functions';

// Base components
@import '../../vendor/reboot';
@import '../../base/page';
@import '../../components/icons/icons';
@import '../../components/form/all';
@import '../../components/buttons/common';

// Secondary components
@import '../../components/tooltip';

// Helpers
@import '../../common/helpers';


// -----------------------------------------------------------------------------
// BUTTONS
// -----------------------------------------------------------------------------

// Variables values assigned in mixins because the first time they are used
// there

#some-really > .custom-selector {
  @include button();
}

// Use color argument to change background of default flat button
.btn {
  @include button($bg: lighten(color('primary'), ($tone * 4)));
}

// Use argument 'gradient' for primary action button
.btn--primary {
  @include button($style: 'gradient');
}

// The specialized mixins nested in button() can be used separately
.btn--lg {
  @include button-size('large');
}

// 2.5D (or 3/4 perspective and pseudo-3D) style
.btn--2-point-5d {
  // The same effect can be achieved by using @include button-2-point-5d();
  @include button($style: 'pseudo-3d');
}

// Outlined button style
.btn--ghost {
  // The same effect can be achieved by using @include button-ghost($bg: $button-bg-base);
  @include button($style: 'ghost');
}


// -----------------------------------------------------------------------------
// FORM
// -----------------------------------------------------------------------------

// LAYOUT

// Containers for input, label and messages
.form__item,
.form__item--callout {
  @include input-container();
}

// Nested container without label. E.g. for day/month/year selects row
.form__item--unlabeled {
  @include input-container($horizontal: true);
}

// COMPONENTS

// Label for text inputs, text areas and selects
.form__label {
  @include label-textfield();
}

// Input[type='text']
.form__text-field {
  @include input();
}

// Input[type='text'], callout type
.form__text-field--callout {
  @include input(callout);
}

// Textarea
.form__text-area {
  @include input($style: 'textarea');
}

// Select
.form__select {
  @include select();
}

// Inline select
.form__select--compact {
  @include select($flex: true);
}

// Label for checkboxes and radio buttons
.form__label--check,
.form__label--radio {
  @include label-rb-chk();
}

// Checkboxes and radio buttons
.form__option {
  @include rb-chk($pos-a: true);
}


// Callout validation icons

.form__validation-icon--success,
.register-field-status-active {
  @include callout-icon();
}

.form__validation-icon--error,
.register-field-status-error {
  @include callout-icon($type: 'error');
}


// LOGIN FORM

// Form container
.form.inline,
.login_form dl {
  @extend %form-inline;
}

// Inputs-container
.inline > .form-field,
.login_form dd {
  @include input-container($horizontal: true);
  vertical-align: middle;
}

// Labels
.label-icon {
  @include label-icon();
}

.label-icon.username,
.username-wrapper > label {
  @extend %icon-user;
}

.label-icon.password,
.password-wrapper > label {
  @extend %icon-password;
}

// Inputs
.sign-in,
.login_form {
  input[type='text'],
  input[type='password'] {
    @include input($width: 200px, $style: 'has-left-icon');
  }
}

// Password input right padding
.sign-in,
.login_form {
  input[type='password'] {
    @extend %form-control-has-link-inside;
  }
}

// Forgot password
.form-forgot,
#forgotten_password > a {
  @extend %form-link-inside-input;
}

// Submit buttons
.btn.primary,
.login_form input[type='submit'] {
  @include button($color: #fff);
}
